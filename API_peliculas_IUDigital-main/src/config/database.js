import mongoose from "mongoose";
/**
 * Configuraci√≥n y conexi√≥n a MongoDB
 * Maneja la conexi√≥n a la base de datos con opciones optimizadas
 */
export const connectDB = async () => {
  try {
    // Verificar si la URI de MongoDB est√° configurada
    if (!process.env.MONGODB_URI) {
      console.log('‚ö†Ô∏è  MONGODB_URI no configurada. Ejecutando sin base de datos.');
      return null;
    }

    // Opciones de conexi√≥n optimizadas para MongoDB Atlas
    const options = {
      maxPoolSize: 10, // M√°ximo n√∫mero de conexiones en el pool
      serverSelectionTimeoutMS: 30000, // Timeout aumentado para selecci√≥n de servidor
      socketTimeoutMS: 45000, // Timeout para operaciones de socket
      bufferCommands: true, // Habilitar buffering de comandos para evitar errores
      family: 4, // Forzar IPv4 para evitar problemas de DNS
      retryWrites: true, // Habilitar reintentos de escritura
      connectTimeoutMS: 30000, // Timeout de conexi√≥n
    };

    // Conectar a MongoDB
    const conn = await mongoose.connect(process.env.MONGODB_URI, options);

    console.log(`‚úÖ MongoDB conectado: ${conn.connection.host}`);
    console.log(`üìä Base de datos: ${conn.connection.name}`);

    // Event listeners para la conexi√≥n
    mongoose.connection.on("error", (err) => {
      console.error("‚ùå Error de conexi√≥n MongoDB:", err);
    });

    mongoose.connection.on("disconnected", () => {
      console.log("‚ö†Ô∏è  MongoDB desconectado");
    });

    mongoose.connection.on("reconnected", () => {
      console.log("üîÑ MongoDB reconectado");
    });

    // Retornar la conexi√≥n para confirmar que est√° establecida
    return conn;

    // Graceful shutdown
    process.on("SIGINT", async () => {
      try {
        await mongoose.connection.close();
        console.log("üîí Conexi√≥n MongoDB cerrada por terminaci√≥n de la aplicaci√≥n");
        process.exit(0);
      } catch (error) {
        console.error("‚ùå Error al cerrar conexi√≥n MongoDB:", error);
        process.exit(1);
      }
    });
  } catch (error) {
    console.error("‚ùå Error conectando a MongoDB:", error.message);

    // En desarrollo, mostrar m√°s detalles del error
    if (process.env.NODE_ENV === "development") {
      console.error("Detalles del error:", error);
    }

    // No terminar el proceso, permitir que el servidor contin√∫e sin DB
    console.log("‚ö†Ô∏è  Servidor continuar√° ejecut√°ndose sin conexi√≥n a base de datos");
    return null;
  }
};

/**
 * Funci√≥n para cerrar la conexi√≥n de base de datos
 * √ötil para testing y shutdown graceful
 */
export const closeDB = async () => {
  try {
    await mongoose.connection.close();
    console.log("üîí Conexi√≥n MongoDB cerrada correctamente");
  } catch (error) {
    console.error("‚ùå Error cerrando conexi√≥n MongoDB:", error);
    throw error;
  }
};

/**
 * Funci√≥n para limpiar la base de datos
 * √ötil para testing
 */
export const clearDB = async () => {
  try {
    const collections = mongoose.connection.collections;

    for (const key in collections) {
      const collection = collections[key];
      await collection.deleteMany({});
    }

    console.log("üßπ Base de datos limpiada");
  } catch (error) {
    console.error("‚ùå Error limpiando base de datos:", error);
    throw error;
  }
};